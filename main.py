# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PIL import Image
import numpy as np
from Filter import Filter
from PyQt5.QtGui import QImage, QPixmap, QMouseEvent
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QGraphicsPixmapItem, QGraphicsScene, QFileDialog, qApp
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2

class Ui_MainWindow(QWidget):
       
    def setupUi(self, MainWindow):
        self.lock = False
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(991, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(10, 50, 711, 501))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 709, 499))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.graphicsView = QtWidgets.QGraphicsView(self.scrollAreaWidgetContents)
        self.graphicsView.setGeometry(QtCore.QRect(0, 0, 709, 499))
        self.graphicsView.setObjectName("graphicsView")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

       
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(740, 260, 61, 16))
        self.label_3.setObjectName("label_3")
        self.horizontalSlider_3 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_3.setGeometry(QtCore.QRect(810, 260, 160, 22))
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_3.setValue(1)
        self.horizontalSlider_3.setMinimum(1)
        self.horizontalSlider_3.setMaximum(50)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(790, 420, 101, 41))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 991, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuMinAnh = QtWidgets.QMenu(self.menubar)
        self.menuMinAnh.setObjectName("menuMinAnh")
        self.menuSacNet = QtWidgets.QMenu(self.menubar)
        self.menuSacNet.setObjectName("menuSacNet")
        self.menuSacNet = QtWidgets.QMenu(self.menubar)
        self.menuNoise = QtWidgets.QMenu(self.menubar)
        self.menuNoise.setObjectName("menuNoise")
        self.menuLab1 = QtWidgets.QMenu(self.menubar)
        self.menuLab1.setObjectName("menuLab1")
        self.menuEdgeDetection = QtWidgets.QMenu(self.menubar)
        self.menuEdgeDetection.setObjectName("menuEdgeDetection")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionGaussian_Filter = QtWidgets.QAction(MainWindow)
        self.actionGaussian_Filter.setObjectName("actionGaussian_Filter")
        self.actionSobel = QtWidgets.QAction(MainWindow)
        self.actionSobel.setObjectName("actionSobel")
        self.actionlaplace = QtWidgets.QAction(MainWindow)
        self.actionlaplace.setObjectName("actionlaplace")
        self.actionMedian = QtWidgets.QAction(MainWindow)
        self.actionMedian.setObjectName("actionMedian")
        self.actionopen_file = QtWidgets.QAction(MainWindow)
        self.actionopen_file.setObjectName("actionopen_file")
        self.actionMedian_Filter = QtWidgets.QAction(MainWindow)
        self.actionsave_as = QtWidgets.QAction(MainWindow)
        self.actionsave_as.setObjectName("actionsave_as")

        self.threshold = QtWidgets.QAction(MainWindow)
        self.threshold.setObjectName("threshold")
        self.reverse = QtWidgets.QAction(MainWindow)
        self.reverse.setObjectName("reverse")
        self.log_tranform = QtWidgets.QAction(MainWindow)
        self.log_tranform.setObjectName("log_tranform")
        self.gamma_tranform = QtWidgets.QAction(MainWindow)
        self.gamma_tranform.setObjectName("gamma_tranform")
        self.bit_Plane_Slicing = QtWidgets.QAction(MainWindow)
        self.bit_Plane_Slicing.setObjectName("bit_Plane_Slicing")
        self.histogram = QtWidgets.QAction(MainWindow)
        self.histogram.setObjectName("histogram")

        self.sobel = QtWidgets.QAction(MainWindow)
        self.sobel.setObjectName("sobel")
        self.laplace = QtWidgets.QAction(MainWindow)
        self.laplace.setObjectName("laplace")

        self.pepper = QtWidgets.QAction(MainWindow)
        self.pepper.setObjectName("pepper")
        self.salt = QtWidgets.QAction(MainWindow)
        self.salt.setObjectName("salt")

        self.max = QtWidgets.QAction(MainWindow)
        self.max.setObjectName("max")
        self.min = QtWidgets.QAction(MainWindow)
        self.min.setObjectName("min")


        self.menuFile.addAction(self.actionopen_file)
        self.menuFile.addAction(self.actionsave_as)
        self.menuLab1.addAction(self.threshold)
        self.menuLab1.addAction(self.reverse)
        self.menuLab1.addAction(self.log_tranform)
        self.menuLab1.addAction(self.gamma_tranform)
        self.menuLab1.addAction(self.bit_Plane_Slicing)
        self.menuLab1.addAction(self.histogram)
        self.menuMinAnh.addAction(self.actionGaussian_Filter)
        self.menuMinAnh.addAction(self.actionMedian_Filter)
        self.menuSacNet.addAction(self.actionSobel)
        self.menuSacNet.addAction(self.actionlaplace)
        self.menuEdgeDetection.addAction(self.sobel)
        self.menuEdgeDetection.addAction(self.laplace)
        self.menuNoise.addAction(self.pepper)
        self.menuNoise.addAction(self.salt)
        self.menuMinAnh.addAction(self.max)
        self.menuMinAnh.addAction(self.min)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuMinAnh.menuAction())
        self.menubar.addAction(self.menuSacNet.menuAction())
        self.menubar.addAction(self.menuLab1.menuAction())
        self.menubar.addAction(self.menuNoise.menuAction())
        self.menubar.addAction(self.menuEdgeDetection.menuAction())

        self.image = 0
        self.Filter = Filter()
        self.actionopen_file.triggered.connect(self.open_file)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def connect_event(self):
        self.horizontalSlider_3.valueChanged['int'].connect(self.gamma_tranform_action)
        self.actionsave_as.triggered.connect(self.save_file)
        self.actionGaussian_Filter.triggered.connect(self.gausse_action)
        self.actionlaplace.triggered.connect(self.laplace_action)
        self.actionSobel.triggered.connect(self.sobel_action)
        self.pushButton.clicked.connect(self.reset)
        self.actionMedian_Filter.triggered.connect(self.median_action)

        self.threshold.triggered.connect(self.threshold_action)
        self.reverse.triggered.connect(self.reverse_action)
        self.log_tranform.triggered.connect(self.log_tranform_action)
        self.gamma_tranform.triggered.connect(self.gamma_tranform_action)
        self.bit_Plane_Slicing.triggered.connect(self.bit_Plane_Slicing_action)
        self.histogram.triggered.connect(self.histogram_action)

        self.pepper.triggered.connect(self.pepper_action)
        self.salt.triggered.connect(self.salt_action)
        self.max.triggered.connect(self.maxFilter_action)
        self.min.triggered.connect(self.minFilter_action)

        self.sobel.triggered.connect(self.sobel_edge_action)
        self.laplace.triggered.connect(self.laplace_edge_action)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_3.setText(_translate("MainWindow", "Gamma"))
        self.pushButton.setText(_translate("MainWindow", "Reset"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuMinAnh.setTitle(_translate("MainWindow", "mịn ảnh"))
        self.menuSacNet.setTitle(_translate("MainWindow", "cải thiện ảnh"))
        self.menuLab1.setTitle(_translate("MainWindow", "Lab1"))
        self.menuNoise.setTitle(_translate("MainWindow", "Nhiễu ảnh"))
        self.menuEdgeDetection.setTitle(_translate("MainWindow", "phát hiện biên"))
        self.actionGaussian_Filter.setText(_translate("MainWindow", "Gaussian Filter"))
        self.actionMedian_Filter.setText(_translate("MainWindow", "Median Filter"))
        self.actionSobel.setText(_translate("MainWindow", "Sobel"))
        self.actionlaplace.setText(_translate("MainWindow", "laplace"))
        self.actionopen_file.setText(_translate("MainWindow", "open file"))
        self.threshold.setText(_translate("MainWindow", "Thresholding"))
        self.reverse.setText(_translate("MainWindow", "Đảo ảnh"))
        self.log_tranform.setText(_translate("MainWindow", "Biến đổi logarit"))
        self.gamma_tranform.setText(_translate("MainWindow", "Biến đổi gamma"))
        self.bit_Plane_Slicing.setText(_translate("MainWindow", "cách lát mặt phẳng bit"))
        self.histogram.setText(_translate("MainWindow", "cân bằng histogram"))
        self.actionsave_as.setText(_translate("MainWindow", "save"))
        self.sobel.setText(_translate("MainWindow", "Sobel"))
        self.laplace.setText(_translate("MainWindow", "laplace"))
        self.pepper.setText(_translate("MainWindow", "nhiễu tiêu"))
        self.salt.setText(_translate("MainWindow", "nhiễu muối"))
        self.max.setText(_translate("MainWindow", "lọc max"))
        self.min.setText(_translate("MainWindow", "lọc min"))

    def save_file(self):
        name, done= QtWidgets.QInputDialog.getText(self, 'Input Dialog', 'Enter file name:')
        if(name != ""): Image.fromarray(self.image).save(name+'.'+self.format)
    def gausse_action(self):
        self.image = self.Filter.gausse_filter(self.image)
        self.set_image()
    def sobel_action(self):
        self.image = self.Filter.sobel_filter(self.image,1)
        self.set_image()
    def laplace_action(self):
        self.image = self.Filter.laplace_filter(self.image,1)
        self.set_image()
    def median_action(self):
        self.image = self.Filter.median_filter(self.image)
        self.set_image()


    def histogram_action(self):
        self.image = self.Filter.equal_histogram(self.image)
        self.set_image()
    def bit_Plane_Slicing_action(self):
        self.image = self.Filter.bit_Plane_Slicing(self.image)

    def threshold_action(self):
        self.image = self.Filter.thresholding(self.image)
        self.set_image()

    def reverse_action(self):
        self.image = self.Filter.pixel_Reverse(self.image)
        self.set_image()

    def log_tranform_action(self):
        self.image = self.Filter.log_Transforms(self.image)
        self.set_image()

    def gamma_tranform_action(self):
        value = self.horizontalSlider_3.value()
        value = value - 25 if value > 25 else float(value/25)  
        self.image = self.Filter.gamma_Transforms(self.image,value)
        print(value)
        self.set_image()
        self.image = self.default_image


    def pepper_action(self):
        self.image = self.Filter.noise(300,self.image,0)
        self.set_image()
    def salt_action(self):
        self.image = self.Filter.noise(300,self.image,255)
        self.set_image()

    def maxFilter_action(self):
        self.image = self.Filter.max_filter(self.image)
        self.set_image()
    def minFilter_action(self):
        self.image = self.Filter.min_filter(self.image)
        self.set_image()

    def laplace_edge_action(self):
        self.image = self.Filter.laplace_filter(self.image,0)
        self.set_image()
    def sobel_edge_action(self):
        self.image = self.Filter.sobel_filter(self.image,0)
        self.set_image()
    def LoG_action(self):
        self.image = self.Filter.LoG_filter(self.image)
        self.set_image()

    def reset(self):
        self.image = self.default_image
        self.set_image()
        # self.horizontalSlider_3.setValue(1)
    def set_image(self):
        image = self.image
        # image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        image = QImage(image, len(image[0]), len(image), image.strides[0], QImage.Format_Grayscale8)
        # image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_Grayscale8)
        # image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(image)

        item = QGraphicsPixmapItem(pixmap)
        scene = QGraphicsScene(self)
        scene.addItem(item)
        self.graphicsView.setScene(scene)

#         Q_image = QtGui.QPixmap.toImage(result)
#         grayscale = image.convertToFormat(QtGui.QImage.Format_Grayscale8)
# pixmap = QtGui.QPixmap.fromImage(grayscale)

    def open_file(self):
        path = QFileDialog.getOpenFileName(self, "Open Image", "", filter="")[0]
        if(path):
            self.path = path
            # self.reset()
            if(not self.lock):
                self.connect_event()
                self.lock = True
            # im = Image.open(self.path)
            # self.format = im.format
            # im = im.convert('L')
            # self.default_image =  np.asarray(im)
            self.default_image = cv2.imread(path)
            self.default_image = cv2.cvtColor(self.default_image, cv2.COLOR_BGR2GRAY)
            self.image = self.default_image
            self.set_image()

if __name__ == "__main__":  
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
